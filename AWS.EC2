#!/usr/bin/python3
import sys
import boto3
resource = boto3.resource('ec2')
client = boto3.client('ec2')
waiter = client.get_waiter('instance_status_ok')

# Keypair name, GIT repo, and instance name
if len (sys.argv) > 1:
    count_instances = sys.argv[1]
else:
    count_instances = 1

if len (sys.argv) > 2:
    git_repo = sys.argv[2]
else:
    git_repo = 'https://github.com/imironyuk/BTCUSD.git'

keypair_name_split_dot = git_repo.split(".")[1]
keypair_name_reverse = keypair_name_split_dot[::-1]
keypair_name_split_slash = keypair_name_reverse.split("/")[0]
keypair_name = keypair_name_split_slash[::-1]
print ('Will created `%s` instances with website from `%s` and keypair name `%s`' % (count_instances, git_repo, keypair_name) )

# passing 'user_data' to the instance that used to run scripts after the instance starts
user_data = ('''#!/bin/bash
yum install -y httpd git
systemctl start httpd
systemctl enable httpd &
cd /home/ec2-user
git clone %s repo
cat << EOF >"/home/ec2-user/reload.sh"
#!/bin/bash
cd /home/ec2-user/repo || cd /home/ec2-user
git pull || git clone %s repo
cp -a /home/ec2-user/repo/html/* /var/www/html/
systemctl reload httpd &
EOF
chmod +x /home/ec2-user/reload.sh
crontab -l 1> mycron
if ! grep -q 'reload.sh' mycron; then
echo "* * * * * /home/ec2-user/reload.sh" >> mycron
fi
crontab mycron
rm -rfv mycron''' % (git_repo, git_repo))

# Automatically gets default vpc_id
default_vpc = client.describe_vpcs()
vpc_id = default_vpc.get('Vpcs', [{}])[0].get('VpcId', '')
print('VPC ID is %s' % vpc_id)

# Idempotent Security Group verification (create if not exist or get security_group_id)
try:
     btcusd_sg = client.describe_security_groups(GroupNames=['BTCUSD'])
     security_group_id = btcusd_sg.get('SecurityGroups', [{}])[0].get('GroupId', '')
except:
     btcusd_sg = client.create_security_group(GroupName='BTCUSD',
                                                   Description='DESCRIPTION',
                                                   VpcId=vpc_id)
     security_group_id = btcusd_sg['GroupId']
     print('Security Group Created %s' % security_group_id)
     data = client.authorize_security_group_ingress(
         GroupId=security_group_id,
         IpPermissions=[
             {'IpProtocol': 'tcp',
              'FromPort': 80,
              'ToPort': 80,
              'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},
             {'IpProtocol': 'tcp',
              'FromPort': 22,
              'ToPort': 22,
              'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}
         ])

# Idempotent SSH key pair verification (create if not exist and get Private Key)
try:
     keypair = client.describe_key_pairs(KeyNames=[keypair_name])
except:
     new_keypair = resource.create_key_pair(KeyName=keypair_name)
     with open(keypair_name, 'w') as file:
         file.write(new_keypair.key_material)
     print('Created keypair %s' % keypair_name)

# Create Instance t2.micro and waiting, for instance, to be available
print('Create new EC2 instance')
new_instance = resource.create_instances(
    ImageId='ami-0533f2ba8a1995cf9',
    MinCount=count_instances,
    MaxCount=count_instances,
    InstanceType='t2.micro',
    KeyName=keypair_name,
    UserData=user_data,
    SecurityGroupIds=[security_group_id],
    TagSpecifications=[
        {
            'ResourceType': 'instance',
            'Tags': [
                {
                    'Key': 'Name',
                    'Value': keypair_name
                },
            ]
        },
    ])

i = 0
count_instances_minus_one = count_instances - 1
while True:
     print('Wait for instance ' + new_instance[i].id)
     new_instance[i].wait_until_running()
     new_instance[i].load()
     waiter.wait(InstanceIds=[new_instance[i].id])
     print('Link to site on instance %s: http://%s' % (i, new_instance[i].public_dns_name))
     if i == count_instances_minus_one :
        break
     i += 1

sys.exit(0)